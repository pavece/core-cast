generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_CON_URL")
}

enum VideoProcessingStatus {
  PENDING
  PROCESSING
}

enum Role {
  ADMIN
  USER
}

model user {
  id                   String   @id @default(uuid())
  username             String   @unique
  channelDescription   String?
  avatar               String?
  channelCover         String?
  email                String   @unique
  password             String
  role                 Role     @default(USER)
  banned               Boolean  @default(false)
  OTPSecret            String?
  OTPPendingValidation Boolean?
  OTPRecoveryCode      String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())

  video  video[]
  upload upload[]
}

model video {
  id           String   @id @default(uuid())
  title        String
  description  String
  thumbnail    String?
  hlsMaterList String?
  previewClip  String?
  userId       String
  public       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  uploadedBy          user                  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  videoProcessingTask videoProcessingTask[]
  upload              upload[]
}

model upload {
  id          String   @id @default(uuid())
  user        String
  multipartId String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  videoId     String

  uploader user  @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: Cascade)
  video    video @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model videoProcessingTask {
  id         String                @id @default(uuid())
  objectName String
  status     VideoProcessingStatus @default(PENDING)
  videoId    String
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @default(now())

  video video @relation(fields: [videoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
